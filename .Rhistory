ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
# Position fills make each bar the same height, and is focused on the proportions across
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
?geom_jitter
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
mpg
ggplot(data=mpg, mapping = aes(x=class, y=cty)) +
geom_boxplot()
?geom_boxplot
ggplot(data=mpg, mapping = aes(x=class, y=cty)) +
geom_boxplot(position="dodge")
ggplot(data=mpg, mapping = aes(x=class, y=cty)) +
geom_boxplot(position="fill")
ggplot(data=mpg, mapping = aes(x=class, y=cty)) +
geom_boxplot(position="identity")
ggplot(data=mpg, mapping = aes(x=class, y=cty)) +
geom_boxplot(position="dodge")
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
install.packages("maps")
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# 1. Turn a stacked bar chart into a pie chart using coord_polar().
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
bar + coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
coord_polar()
# 2. What does labs() do? Read the documentation.
?labs()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_map()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_map()
?coord_map()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
?mpg
?coord_fixed()
testing <- 3
testing
seq(1,10)
x <- "hello world"
y <- seq(1, 10, length.out = 5)
y
(y <- seq(1, 10, length.out = 5))
my_variable <- 10
my_varıable
library(tidyverse)
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(mpg, cyl = 8)
filter(diamond, carat > 3)
diamond
diamonds
filter(diamonds, carat > 3)
filter(diamonds, carat > 3)
library(nycflights13)
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
?flights
flights
filter(flights, month==1, day==1)
sqrt(2) ^ 2 == 2
#> [1] FALSE
1 / 49 * 49 == 1
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
df
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
(filter(df, is.na(x) | x > 1))
flights
# 1. Had an arrival delay of two or more hours
filter(flights, dep_delay >= 120)
# 2. Flew to Houston (IAH or HOU)
(filter(flights, dest == "IAH" | dest == "HOU"))
unique(flights$carrier)
# 3. Were operated by United, American, or Delta
(filter(flights, carrier %in% c("UA", "AA", "DL")))
# 4. Departed in summer (July, August, and September)
(filter(flights, month %in% c(7,8,9)))
# 5. Arrived more than two hours late, but didn’t leave late
(filter(flights, arr_delay > 120 & dep_delay <= 0))
# 6. Were delayed by at least an hour, but made up over 30 minutes in flight
(filter(flights, dep_delay >= 60  & (arr_delay - dep_delay) >= 30))
# 7. Departed between midnight and 6am (inclusive)
(filter(flights, dep_time == 0000))
# 7. Departed between midnight and 6am (inclusive)
(filter(flights, dep_time == 2359))
# 7. Departed between midnight and 6am (inclusive)
(filter(flights, dep_time <= 0600 & dep_time >= 0000))
# 7. Departed between midnight and 6am (inclusive)
(filter(flights, dep_time <= 0600))
# 5. Arrived more than two hours late, but didn’t leave late
(filter(flights, arr_delay > 120, dep_delay <= 0))
# 7. Departed between midnight and 6am (inclusive)
(filter(flights, dep_time <= 0600 | dep_time == 2400))
# 2. Another useful dplyr filtering helper is between(). What does it do?
# Can you use it to simplify the code needed to answer the previous challenges?
?between()
# 3. Hw many flights have a missing dep_time? What other variables are missing?
# What might these rows represent?
(filter(flights, dep_time.isna()))
flights
# 3. Hw many flights have a missing dep_time? What other variables are missing?
# What might these rows represent?
(filter(flights, dep_time.is.na()))
# 3. Hw many flights have a missing dep_time? What other variables are missing?
# What might these rows represent?
(filter(flights, is.na(dep_time)))
NA ^ 0
# anything to the power of 0 is 1, even nothing
NA | TRUE
# 1. How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
arrange(flights)
library(nycflights13)
library(tidyverse)
# 1. How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
arrange(flights)
# 1. How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
arrange(flights, is.na())
?arrange
?arrange()
arrange(flights, desc(is.na(dep_time)))
arrange(flights, arr_delay, dep_delay)
arrange(flights, desc(arr_delay, dep_delay))
arrange(flights, dep_delay)
arrange(flights, air_time)
View(arrange(flights, air_time))
# 4. Which flights travelled the farthest? Which travelled the shortest?
arrange(flights, distance)
arrange(flights, desc(distance))
# 1. Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time,
# and arr_delay from flights.
flights
select(flights, dep_time, dep_delay, arr_time,arr_delay)
select(flights, dep_time:arr_delay)
select(flights, starts_with(c("dep", "arr")))
select(flights, starts_with("dep", "arr"))
select(flights, starts_with("dep"))
select(flights, starts_with("dep"), starts_with("arr"))
# 2. What happens if you include the name of a variable multiple times in a select() call?
select(flights, dep_time)
# 2. What happens if you include the name of a variable multiple times in a select() call?
select(flights, dep_time, dep_time)
# 2. What happens if you include the name of a variable multiple times in a select() call?
select(flights, dep_time, dep_time, dep_time)
is.na(flights)
summarize(is.na(flights))
summarise(is.na(flights))
?one_of()
?one_of()
select(flights, contains("TIME"))
?contains()
select(flights, contains("TIME", ignore_case=TRUE))
select(flights, contains("TIME", ignore.case=TRUE))
select(flights, contains("TIME", ignore.case=FALSE))
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
1:3 + 1:10
1:3 + 1:10
library(nycflights13)
library(tidyverse)
head(flights)
min(flights$sched_dep_time)
max(flights$sched_dep_time)
min(flights$sched_dep_time)
arrange(flights, schedul_dep_time)
arrange(flights, sched_dep_time)
arrange(flights, dep_time)
?arraange
?arrange
max(flights$dep_time)
(flights$dep_time)
min(flights$dep_time)
type(flights$dep_time)
typeof(flights$dep_time)
typeof(flights$sched_dep_time)
min(flights$sched_dep_time)
min(flights$dep_time)
sum(is.na(flights$dep_time))
sum(is.na(flights$sched_dep_time))
filter(flights, dep_time=0)
filter(flights, dep_time==0)
filter(flights, dep_time==1)
filter(flights, dep_time==0)
filter(flights, dep_time==2)
difftime(as.POSIXct('13:34', format = '%H:%M'), as.POSIXct('00:00', format = '%H:%M'), units = 'min')
difftime(as.POSIXct('1334', format = '%H%M'), as.POSIXct('00:00', format = '%H%M'), units = 'min')
difftime(as.POSIXct('1334', format = '%H:%M'), as.POSIXct('00:00', format = '%H:%M'), units = 'min')
difftime(as.POSIXct('13:34', format = '%H:%M'), as.POSIXct('00:00', format = '%H:%M'), units = 'min')
difftime(as.POSIXct('1334', format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
difftime(as.POSIXct('334', format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
difftime(as.POSIXct('0334', format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
diff_in_time <- function(input){
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time('0334')
diff_in_time('2359')
diff_in_time('0000')
diff_in_time(0000)
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
toString(x, width = 8)
toString(x, width = 3)
diff_in_time <- function(input){
difftime(as.POSIXct(toString(input), format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0000)
diff_in_time(0001)
diff_in_time <- function(input){
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0001)
diff_in_time("0001")
diff_in_time <- function(input){
input = toString(input)
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time("0001")
diff_in_time(0001)
diff_in_time <- function(input){
class(input)
input = toString(input)
class(input)
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0001)
diff_in_time <- function(input){
print(class(input))
input = toString(input)
print(class(input))
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0001)
diff_in_time("0001")
diff_in_time <- function(input){
print(class(input))
input = toString(input)
print(class(input))
print(input)
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time("0001")
diff_in_time(0001)
diff_in_time(2359)
diff_in_time(2014)
diff_in_time(0500)
formatC(01, width=4)
formatC(01, width=4, "0")
formatC(01, width=4, flag="0")
diff_in_time <- function(input){
input = formatC(toString(input), width=4, flag="0")
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0500)
diff_in_time <- function(input){
input = formatC(toString(input), width=4, flag="0")
print(input)
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0500)
formatC(01, width=4, flag="-0")
anim <- 25499:25504
anim
sprintf("%06d",01)
sprintf("%04d",01)
sprintf("%04d",500)
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
print(input)
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0500)
diff_in_time(0001)
filter(flights, sched_dep_time = 0)
filter(flights, sched_dep_time == 0)
filter(flights, is.na(sched_dep_time))
flights$sched_dep_time_min <- lapply(flights$sched_dep_time, diff_in_time)
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
flights$sched_dep_time_min <- lapply(flights$sched_dep_time, diff_in_time)
head(flights)
select(flights, sched_dep_time_min, sched_dep_time)
flights$sched_dep_time_min
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0530)
?difftime
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'))
}
diff_in_time(0530)
?difftime
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min')
}
diff_in_time(0530)
flights$sched_dep_time_min <- lapply(flights$sched_dep_time, diff_in_time)
print(diff_in_time(0530))
a <- diff_in_time(0530)
a
class(a)
as.double(a)
diff_in_time <- function(input){
input = formatC(sprintf("%04d", input), width=4, flag="0")
as.double(difftime(as.POSIXct(input, format = '%H%M'), as.POSIXct('0000', format = '%H%M'), units = 'min'))
}
diff_in_time(0530)
flights$sched_dep_time_min <- lapply(flights$sched_dep_time, diff_in_time)
flights$sched_dep_time_min
flights[is.na(flights$dep_time)] <- 0
flights$dep_time[is.na(flights$dep_time)] <- 0
min(flights$dep_time)
filter(flights, is.na(flights$dep_time))
flights$dep_time_min <- lapply(flights$dep_time, diff_in_time)
flights$air_time
head(flights)
head(select(flights, head, arr_time, dep_time))
select(flights, head, arr_time, dep_time)
head(select(flights, arr_time, dep_time))
head(select(flights, arr_time, dep_time, air_time))
flights
head(select(flights, arr_time, dep_time, air_time))
select(flights,origin, dest)
flights
filter(flights, origin="SG")
filter(flights, origin=="SG")
flights >%> count(dest)
flights >%> count(flights, dest)
flights >%> count(dest, origin)
flights %>% count(dest, origin)
filter(flights, dest = "JFK")
filter(flights, dest == "JFK")
filter(flights, dest == "ABQ", origin=="JFK")
filtered_jfk_abq <- filter(flights, dest == "ABQ", origin=="JFK")
select(filtered_jfk_abq, origin, dest, arr_time, dep_time, air_time)
a <- select(filtered_jfk_abq, origin, dest, arr_time, dep_time, air_time)
a$diff = a$dep_time - a$arr_time
a
a$diff = a$arr_time - a$dep_time
a
a$diff_air_time_diff <- a$air_time - a$diff
a
select(floghts, dep_time, sched_dep_time, dep_delay)
select(flights, dep_time, sched_dep_time, dep_delay)
# By right, sched_dep_time + dep_delay = dep_time
flights$test <- flights$sched_dep_time + flights$dep_delay
flights$test
flights
select(flights, sched_dep_time, dep_delay, dep_time, test)
# By right, sched_dep_time + dep_delay = dep_time
flights$test <- flights$sched_dep_time - flights$dep_time
flights$test
flights$test_diff <- flights$test - flights$dep_delay
flights$test_diff
flights$test_diff
select(flights, sched_dep_time, dep_delay, dep_time, test, test_diff)
# By right, sched_dep_time + dep_delay = dep_time
flights$test <- flights$dep_time - flights$sched_dep_time
flights$test_diff <- flights$test - flights$dep_delay
flights$test_diff
select(flights, sched_dep_time, dep_delay, dep_time, test, test_diff)
# 4. Find the 10 most delayed flights using a ranking function.
# How do you want to handle ties? Carefully read the documentation for min_rank().
?min_rank
flights
# to find the most delayed flights, we only use arr_delay, cause anytime at the scheduled
# delay is made up for
arrange(flights, arr_delay)
?arrange
# to find the most delayed flights, we only use arr_delay, cause anytime at the scheduled
# delay is made up for
arrange(flights, desc(arr_delay ))
?min_rank
x <- c(5, 1, 3, 2, 2, NA)
min_rank(x)
rank(flights, desc(arr_delay))
rank(desc(flights$arr_delay))
?rank
min_rank(desc(flights$arr_delay))
a <- min_rank(desc(flights$arr_delay))
a
filter(a < 10)
filter(a, a <=10)
class(a)
a
a[1]
class(a[1])
flights$rank <- min_rank(desc(flights$arr_delay))
filter(flights, flights$rank < 10)
select(filter(flights, flights$rank < 10),rank, arr_delay)
# 5. What does 1:3 + 1:10 return? Why?
1:3 + 1:10
1:3
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>% count(dest)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>% count(dest)
not_cancelled
table(not_cancelled$dest)
not_cancelled %>% count(dest)
table(not_cancelled$dest)
not_cancelled %>% count(tailnum, wt = distance)
not_cancelled %>% count(tailnum, wt = distance)
filter(not_cancelled, tailnum = "D942DN")
filter(not_cancelled, tailnum == "D942DN")
filter(not_cancelled, tailnum == "D942DN")$distance
sum(filter(not_cancelled, tailnum == "D942DN")$distance)
?table
table(not_cancelled$tailnum)
aggregate(not_cancelled$tailnum)
aggregate(not_cancelled$tailnum, FUN=sum)
aggregate(not_cancelled$tailnum, by=not_cancelled$distance, FUN=sum)
aggregate(not_cancelled$tailnum, by=list(not_cancelled$distance), FUN=sum)
aggregate(not_cancelled$distance, by=list(not_cancelled$tailnum), FUN=sum)
